syntax = "proto3";
package hashicorp.raft.internal.appendentries;
option go_package = "github.com/hashicorp/raft/commands";
import "common.proto";
// AppendEntriesRequest is the command used to append entries to the
// replicated log.
// mog annotation:
//
// target=github.com/hashicorp/raft.AppendEntriesRequest
// output=command.gen.go
// name=Struct
// ignore-fields=state,sizeCache,unknownFields
message AppendEntriesRequest {
    common.RPCHeader RPCHeader = 1;
    // Provide the current term and leader
    uint64 Term = 2;

// Deprecated: use RPCHeader.Addr instead
    bytes Leader = 3;

// Provide the previous entries for integrity checking
    uint64 PrevLogEntry = 4;
    uint64 PrevLogTerm  = 5;

// New entries to commit
    repeated common.Log Entries = 6;

// Commit index on the leader
    uint64 LeaderCommitIndex = 7;
    }


// AppendEntriesResponse is the response returned from an
// AppendEntriesRequest.
// mog annotation:
//
// target=github.com/hashicorp/raft.AppendEntriesResponse
// output=command.gen.go
// name=Struct
// ignore-fields=state,sizeCache,unknownFields
message AppendEntriesResponse {
    common.RPCHeader RPCHeader = 1;

// Newer term if leader is out of date
    uint64 Term = 2;
// Last Log is a hint to help accelerate rebuilding slow nodes
    uint64 LastLog = 3;

// We may not succeed if we have a conflicting entry
    bool Success = 4;

// There are scenarios where this request didn't succeed
// but there's no need to wait/back-off the next attempt.
    bool NoRetryBackoff = 5;
    }

service Commands {
    rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse) {}
}